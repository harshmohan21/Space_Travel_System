import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobLauncher;
import org.springframework.batch.core.JobParameters;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;
import org.springframework.web.context.WebApplicationContext;

@SpringJUnitConfig
public class ControllerTest {

    @Mock
    private JobLauncher jobLauncher;

    @Mock
    private Job job;

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private WebApplicationContext webApplicationContext;

    @InjectMocks
    private Controller controller;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testHandle() throws Exception {
        // Arrange
        String tableName = "testTable";
        String configId = "testConfigId";
        ConfigAccess configAccess = mock(ConfigAccess.class);
        JobParam jobParam = mock(JobParam.class);
        JobParameters jobParameters = new JobParameters();
        JobExecution jobExecution = mock(JobExecution.class);

        when(jdbcTemplate.queryForObject(any(String.class), any(Class.class))).thenReturn(configAccess);
        when(jobParam.setJobParam(tableName, configId)).thenReturn(jobParameters);
        when(jobLauncher.run(job, jobParameters)).thenReturn(jobExecution);

        // Act
        controller.handle(tableName, configId);

        // Assert
        verify(jobLauncher, times(1)).run(job, jobParameters);
    }

    @Test
    public void testStop() throws Exception {
        // Arrange
        ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class);
        when(webApplicationContext.getParent()).thenReturn(context);

        doNothing().when(context).close();

        // Act
        controller.stop();

        // Assert
        verify(webApplicationContext, times(1)).getParent();
        verify(context, times(1)).close();
    }

    @Test
    public void testCreateFileConfigTable() throws Exception {
        // Arrange
        String tableName = "testTable";
        FileConfigTable fileConfigTable = mock(FileConfigTable.class);

        // Act
        controller.createFileConfigTable(tableName);

        // Assert
        verify(fileConfigTable, times(1)).configTable(tableName);
    }

    @Test
    public void testInsertConfig() throws Exception {
        // Arrange
        String sql = "INSERT INTO testTable (id, name) VALUES (1, 'testName')";
        InsertUpdateDeleteRecord record = mock(InsertUpdateDeleteRecord.class);

        // Act
        controller.insertConfig(sql);

        // Assert
        verify(record, times(1)).execute(sql);
    }
}
