To ensure that the SQL statement being executed by `JdbcTemplate.execute(sql)` is only of type `INSERT`, you can add a check in your code before executing the statement. This can be done by validating the SQL string to confirm that it starts with the `INSERT` keyword.

Here’s an example of how you can implement this check in your Spring application:

```java
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

@Component
public class SqlExecutor {

    private final JdbcTemplate jdbcTemplate;

    public SqlExecutor(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public void executeInsert(String sql) {
        // Trim leading/trailing whitespace and convert to uppercase for case-insensitive comparison
        String trimmedSql = sql.trim().toUpperCase();
        
        // Check if the SQL statement is an INSERT statement
        if (trimmedSql.startsWith("INSERT")) {
            jdbcTemplate.execute(sql);
            System.out.println("Executed SQL: " + sql);
        } else {
            throw new IllegalArgumentException("Only INSERT statements are allowed. Provided SQL: " + sql);
        }
    }
}
```

### Usage Example

Here’s how you can use the `SqlExecutor` in your Spring application:

```java
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class MainApplication {
    public static void main(String[] args) {
        // Ensure that you have a configured ApplicationContext and JdbcTemplate bean
        ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
        JdbcTemplate jdbcTemplate = context.getBean(JdbcTemplate.class);

        SqlExecutor sqlExecutor = new SqlExecutor(jdbcTemplate);

        // Example SQL statements
        String insertSql = "INSERT INTO my_table (column1, column2) VALUES ('value1', 'value2')";
        String invalidSql = "UPDATE my_table SET column1 = 'value' WHERE column2 = 'value2'";

        // Execute valid INSERT statement
        sqlExecutor.executeInsert(insertSql);

        // Attempt to execute invalid non-INSERT statement (will throw an exception)
        try {
            sqlExecutor.executeInsert(invalidSql);
        } catch (IllegalArgumentException e) {
            System.err.println(e.getMessage());
        }
    }
}
```

### Explanation

1. **SqlExecutor Class**:
   - The `executeInsert` method first trims any leading or trailing whitespace from the SQL statement and converts it to uppercase to make the check case-insensitive.
   - It then checks if the trimmed SQL statement starts with the `INSERT` keyword.
   - If the statement is an `INSERT`, it executes the statement using `JdbcTemplate.execute(sql)`.
   - If the statement is not an `INSERT`, it throws an `IllegalArgumentException`.

2. **MainApplication Class**:
   - Demonstrates how to use the `SqlExecutor` class.
   - Includes example SQL statements and shows how to handle an invalid non-`INSERT` statement.

### Notes:
- This approach assumes that the SQL statements are simple and do not contain comments or complex structures that might require more sophisticated parsing.
- For more complex SQL validation, consider using a SQL parser library, but this should suffice for basic `INSERT` statement validation.
