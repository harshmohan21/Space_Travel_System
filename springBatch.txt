If you want to achieve the functionality without using Spring Data JPA and relying on plain JDBC, you need to manually implement the repository methods using `JdbcTemplate`. Below are the steps to implement the required functionality without Spring Data JPA:

### Step 1: Create the Entity Class

Define the `JobConfig` entity class.

```java
import java.util.List;

public class JobConfig {
    private String configId;
    private String filepath;
    private String delimiter;
    private List<String> fileColumns;
    private List<String> requiredColumns;
    private List<String> dbColumns;
    private List<String> datatypes;
    private String destTable;
    private Boolean skipException;

    // Getters and setters
    public String getConfigId() {
        return configId;
    }

    public void setConfigId(String configId) {
        this.configId = configId;
    }

    public String getFilepath() {
        return filepath;
    }

    public void setFilepath(String filepath) {
        this.filepath = filepath;
    }

    public String getDelimiter() {
        return delimiter;
    }

    public void setDelimiter(String delimiter) {
        this.delimiter = delimiter;
    }

    public List<String> getFileColumns() {
        return fileColumns;
    }

    public void setFileColumns(List<String> fileColumns) {
        this.fileColumns = fileColumns;
    }

    public List<String> getRequiredColumns() {
        return requiredColumns;
    }

    public void setRequiredColumns(List<String> requiredColumns) {
        this.requiredColumns = requiredColumns;
    }

    public List<String> getDbColumns() {
        return dbColumns;
    }

    public void setDbColumns(List<String> dbColumns) {
        this.dbColumns = dbColumns;
    }

    public List<String> getDatatypes() {
        return datatypes;
    }

    public void setDatatypes(List<String> datatypes) {
        this.datatypes = datatypes;
    }

    public String getDestTable() {
        return destTable;
    }

    public void setDestTable(String destTable) {
        this.destTable = destTable;
    }

    public Boolean getSkipException() {
        return skipException;
    }

    public void setSkipException(Boolean skipException) {
        this.skipException = skipException;
    }
}
```

### Step 2: Create the Repository Class

Implement the repository methods using `JdbcTemplate`.

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;

@Repository
public class JobConfigRepository {
    @Autowired
    private JdbcTemplate jdbcTemplate;

    private static final String FIND_BY_ID_SQL = "SELECT * FROM job_configurations WHERE config_id = ?";

    public JobConfig findById(String configId) {
        return jdbcTemplate.queryForObject(FIND_BY_ID_SQL, new Object[]{configId}, new JobConfigRowMapper());
    }

    private static class JobConfigRowMapper implements RowMapper<JobConfig> {
        @Override
        public JobConfig mapRow(ResultSet rs, int rowNum) throws SQLException {
            JobConfig jobConfig = new JobConfig();
            jobConfig.setConfigId(rs.getString("config_id"));
            jobConfig.setFilepath(rs.getString("filepath"));
            jobConfig.setDelimiter(rs.getString("delimiter"));
            jobConfig.setFileColumns(Arrays.asList((String[]) rs.getArray("file_columns").getArray()));
            jobConfig.setRequiredColumns(Arrays.asList((String[]) rs.getArray("required_columns").getArray()));
            jobConfig.setDbColumns(Arrays.asList((String[]) rs.getArray("db_columns").getArray()));
            jobConfig.setDatatypes(Arrays.asList((String[]) rs.getArray("datatypes").getArray()));
            jobConfig.setDestTable(rs.getString("dest_table"));
            jobConfig.setSkipException(rs.getBoolean("skip_exception"));
            return jobConfig;
        }
    }
}
```

### Step 3: Create the Service Class

Implement the service class to fetch job configuration from the database.

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;

@Service
public class JobConfigService {
    @Autowired
    private JobConfigRepository jobConfigRepository;

    public Map<String, Object> getJobConfig(String configId) {
        JobConfig jobConfig = jobConfigRepository.findById(configId);
        if (jobConfig == null) {
            throw new RuntimeException("Configuration not found");
        }

        Map<String, Object> jobParameters = new HashMap<>();
        jobParameters.put("dest_table", jobConfig.getDestTable());
        jobParameters.put("appendData", jobConfig.getAppendData().toString());
        // Add other parameters as needed

        return jobParameters;
    }
}
```

### Step 4: Update the Controller Class

Modify the `JobLauncherController` to use this service.

```java
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobLauncher;
import org.springframework.batch.core.JobParameter;
import org.springframework.batch.core.JobParameters;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.HashMap;
import java.util.Map;

@RestController
public class JobLauncherController {
    @Autowired
    private JobLauncher jobLauncher;

    @Autowired
    private Job job;

    @Autowired
    private JobConfigService jobConfigService;

    @PostMapping("/jobLauncher")
    public void handle(@RequestParam("configId") String configId) throws Exception {
        Map<String, JobParameter> jobParameters = createJobParam(configId);
        JobExecution jobExecution = jobLauncher.run(job, new JobParameters(jobParameters));
        // Handle the job execution result as needed
    }

    private Map<String, JobParameter> createJobParam(String configId) {
        Map<String, Object> jobConfig = jobConfigService.getJobConfig(configId);
        Map<String, JobParameter> jobParameters = new HashMap<>();
        jobConfig.forEach((key, value) -> jobParameters.put(key, new JobParameter(value.toString())));
        return jobParameters;
    }
}
```

### Summary

1. **Entity Class**: Define the `JobConfig` class to match the database table structure.
2. **Repository Class**: Implement the `JobConfigRepository` using `JdbcTemplate` for database operations.
3. **Service Class**: Use the repository to fetch job configuration and convert it to a map of job parameters.
4. **Controller Class**: Modify the controller to fetch job configuration and use it to create job parameters and run the job.

This setup should work without using Spring Data JPA and instead relies on plain JDBC for database operations. Make sure your table and column names match those used in the entity class and repository methods.
