import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.jdbc.core.JdbcTemplate;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ConfigAccessTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    private ConfigAccess configAccess;

    @BeforeEach
    void setUp() {
        configAccess = new ConfigAccess(jdbcTemplate);
    }

    @Test
    void testDao_ConfigFound() {
        // Arrange
        String tableName = "config_table";
        String configId = "123";
        String sql = "SELECT * FROM " + tableName + " WHERE CONFIG_ID = ?";
        Map<String, Object> expectedConfig = new HashMap<>();
        expectedConfig.put("key", "value");

        when(jdbcTemplate.queryForList(sql, configId)).thenReturn(Collections.singletonList(expectedConfig));

        // Act
        Map<String, Object> actualConfig = configAccess.dao(tableName, configId);

        // Assert
        assertEquals(expectedConfig, actualConfig);
        verify(jdbcTemplate, times(1)).queryForList(sql, configId);
    }

    @Test
    void testDao_ConfigNotFound() {
        // Arrange
        String tableName = "config_table";
        String configId = "123";
        String sql = "SELECT * FROM " + tableName + " WHERE CONFIG_ID = ?";

        when(jdbcTemplate.queryForList(sql, configId)).thenReturn(Collections.emptyList());

        // Act & Assert
        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
            configAccess.dao(tableName, configId);
        });

        assertEquals("No configuration found for configId: " + configId, exception.getMessage());
        verify(jdbcTemplate, times(1)).queryForList(sql, configId);
    }
}
