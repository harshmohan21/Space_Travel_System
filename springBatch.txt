You are correct. In recent versions of Spring Batch, you should use the `StepExecutionListener` interface directly instead of `StepExecutionListenerSupport`. Here's an updated version of the solution using the `StepExecutionListener` interface:

### Step 1: Create the `StepExecutionListener`

```java
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.StepExecutionListener;

public class CustomStepExecutionListener implements StepExecutionListener {

    private final String destTable;

    public CustomStepExecutionListener(String destTable) {
        this.destTable = destTable;
    }

    @Override
    public void beforeStep(StepExecution stepExecution) {
        // You can add any setup logic here if needed
    }

    @Override
    public ExitStatus afterStep(StepExecution stepExecution) {
        long readCount = stepExecution.getReadCount();
        long writeCount = stepExecution.getWriteCount();
        long skipCount = stepExecution.getSkipCount();

        System.out.println("Destination Table: " + destTable);
        System.out.println("Total records read: " + readCount);
        System.out.println("Total records written: " + writeCount);
        System.out.println("Total records skipped: " + skipCount);

        return stepExecution.getExitStatus();
    }
}
```

### Step 2: Register the Listener in Your Step Configuration

```java
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.JobScope;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.ItemWriter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.transaction.PlatformTransactionManager;

@Bean
@JobScope
public Step step(JobRepository jobRepository,
                 PlatformTransactionManager transactionManager,
                 ItemReader<Map<String, Object>> reader,
                 ItemProcessor<Map<String, Object>, Map<String, Object>> processor,
                 ItemWriter<Map<String, Object>> writer,
                 @Value("#{jobParameters['SkipException']}") String skipException,
                 @Value("#{jobParameters['lineCount']}") long lineCount,
                 @Value("#{jobParameters['destTable']}") String destTable) {

    System.out.println("Skip data " + skipException);
    int chunkSize = (int) (lineCount / 100);
    boolean skip = Boolean.parseBoolean(skipException);
    double skipLim = lineCount * 0.05;
    int skipLimit = Math.min((int) skipLim, Integer.MAX_VALUE);

    StepBuilder stepBuilder = new StepBuilder("jobStep", jobRepository);
    return stepBuilder.<Map<String, Object>, Map<String, Object>>chunk(chunkSize, transactionManager)
            .reader(reader)
            .processor(processor)
            .writer(writer)
            .faultTolerant()
            .skip(FlatFileParseException.class)
            .skip(BadSqlGrammarException.class)
            .retry(FlatFileParseException.class)
            .skipLimit(skip ? skipLimit : 0)
            .listener(new CustomStepExecutionListener(destTable))
            .build();
}
```

### Explanation:

1. **CustomStepExecutionListener**: This class implements the `StepExecutionListener` interface directly, providing the `beforeStep` and `afterStep` methods. The `afterStep` method logs the desired metrics.
2. **Step Configuration**: The `listener` method in the `StepBuilder` registers the `CustomStepExecutionListener` to the step.

This approach ensures compatibility with the latest Spring Batch versions while providing the desired logging functionality for your step execution.
