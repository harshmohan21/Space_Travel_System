    import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@Service
public class JobParameterService {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    public JobParameters createJobParam(MultipartFile jsonFile) throws Exception {
        String configId = "1"; // Hardcoded for demonstration
        String tableName = "JOB_CONFIGURATIONS"; // Ensure this matches your table name

        String sql = "SELECT * FROM " + tableName + " WHERE CONFIG_ID = ?";
        List<Map<String, Object>> result = jdbcTemplate.queryForList(sql, configId);

        if (result.isEmpty()) {
            throw new RuntimeException("No configuration found for configId: " + configId);
        }

        Map<String, Object> config = result.get(0);

        // Extract data from the result
        String filePath = (String) config.get("FILEPATH");
        String delimiter = (String) config.get("DELIMITER");
        String destTable = (String) config.get("DEST_TABLE");
        String skipException = (String) config.get("SKIP_EXCEPTION");
        String appendData = (String) config.get("APPEND_DATA");

        Path path = Paths.get(filePath);
        long lineCount = Files.lines(path).count();

        // Convert array columns to comma-separated strings
        String fileColumns = arrayToString((Object[]) ((java.sql.Array) config.get("FILE_COLUMNS")).getArray());
        String requiredColumns = arrayToString((Object[]) ((java.sql.Array) config.get("REQUIRED_COLUMNS")).getArray());
        String dbColumns = arrayToString((Object[]) ((java.sql.Array) config.get("DB_COLUMNS")).getArray());
        String dataTypes = arrayToString((Object[]) ((java.sql.Array) config.get("DATATYPES")).getArray());

        // Transfer the MultipartFile to a temporary file
        File tempFile = File.createTempFile("uploaded-", "-json");
        jsonFile.transferTo(tempFile);
        String absolutePath = tempFile.getAbsolutePath();
        File jsonTempFile = new File(absolutePath);

        // Parse JSON file
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode rootNode = objectMapper.readTree(jsonTempFile);
        ObjectNode objectNode = (ObjectNode) rootNode;

        // Create JobParameters
        return new JobParametersBuilder()
                .addString("filePath", filePath)
                .addString("delimiter", delimiter)
                .addString("fileColumns", fileColumns)
                .addString("requiredColumns", requiredColumns)
                .addString("dbColumns", dbColumns)
                .addString("dataTypes", dataTypes)
                .addString("destTable", destTable)
                .addString("skipException", skipException)
                .addString("appendData", appendData)
                .addLong("lineCount", lineCount)
                .addLong("startAt", System.currentTimeMillis())
                .toJobParameters();
    }

    private String arrayToString(Object[] array) {
        StringBuilder sb = new StringBuilder();
        for (Object obj : array) {
            sb.append(obj.toString()).append(",");
        }
        return sb.length() > 0 ? sb.substring(0, sb.length() - 1) : "";
    }
}
