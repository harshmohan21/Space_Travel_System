import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.core.JsonProcessingException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.core.step.builder.SimpleStepBuilder;
import org.springframework.batch.core.step.tasklet.TaskletStep;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.ItemWriter;
import org.springframework.batch.test.context.SpringBatchTest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Bean;
import org.springframework.core.task.TaskExecutor;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.transaction.PlatformTransactionManager;

import java.util.HashMap;
import java.util.Map;

@SpringBootTest
@ExtendWith(MockitoExtension.class)
@SpringBatchTest
class BootBatchExampleApplicationTests {

    @Mock
    private JobRepository jobRepository;

    @Mock
    private PlatformTransactionManager transactionManager;

    @Mock
    private ItemReader<Map<String, Object>> itemReader;

    @Mock
    private ItemProcessor<Map<String, Object>, Map<String, Object>> itemProcessor;

    @Mock
    private ItemWriter<Map<String, Object>> itemWriter;

    @Autowired
    private BatchConfig batchConfig;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Test
    void testJobBean() throws Exception {
        Step step = new StepBuilder("jobStep", jobRepository)
                .<Map<String, Object>, Map<String, Object>>chunk(10, transactionManager)
                .reader(itemReader)
                .processor(itemProcessor)
                .writer(itemWriter)
                .build();
        Job job = new JobBuilder("job", jobRepository)
                .start(step)
                .build();

        Assertions.assertNotNull(job);
    }

    @Test
    void testItemProcessor() throws JsonProcessingException {
        ItemProcessor<Map<String, Object>, Map<String, Object>> processor = batchConfig.itemProcessor();
        Assertions.assertNotNull(processor);
    }

    @Test
    void testTaskExecutor() {
        TaskExecutor executor = batchConfig.taskExecutor();
        Assertions.assertNotNull(executor);
    }

    @Test
    void testJobLauncher() throws Exception {
        JobLauncher launcher = batchConfig.jobLauncher();
        Assertions.assertNotNull(launcher);
    }

    @Test
    void testEnsureTableExistsAndIsEmpty() {
        doNothing().when(jdbcTemplate).execute(anyString());
        batchConfig.ensureTableExistsAndIsEmpty(jdbcTemplate, "test_table");
        verify(jdbcTemplate, times(1)).execute("SELECT 1 FROM test_table WHERE 1 = 0");
        verify(jdbcTemplate, times(1)).execute("TRUNCATE TABLE test_table");
    }

    @Test
    void testBuildDynamicSql() {
        Map<String, Object> sampleItem = new HashMap<>();
        sampleItem.put("col1", "val1");
        sampleItem.put("col2", "val2");

        String expectedSql = "INSERT INTO test_table (col1, col2) VALUES (:col1, :col2)";
        String sql = batchConfig.buildDynamicSql(sampleItem, "test_table");

        Assertions.assertEquals(expectedSql, sql);
    }

    @Test
    void testMapToSqlParameterSource() {
        Map<String, Object> item = new HashMap<>();
        item.put("col1", "val1");
        item.put("col2", 123);

        SqlParameterSource parameterSource = batchConfig.mapToSqlParameterSource(item);

        Assertions.assertEquals("val1", parameterSource.getValue("col1"));
        Assertions.assertEquals(123, parameterSource.getValue("col2"));
    }

    @Test
    void testItemWriter() throws Exception {
        doNothing().when(jdbcTemplate).execute(anyString());
        Map<String, Object> jobParameters = new HashMap<>();
        jobParameters.put("dest_table", "test_table");
        jobParameters.put("appendData", "false");

        ItemWriter<Map<String, Object>> writer = batchConfig.itemWriter(dataSource, jdbcTemplate, "test_table", "false");

        List<Map<String, Object>> items = new ArrayList<>();
        Map<String, Object> item = new HashMap<>();
        item.put("col1", "val1");
        item.put("col2", 123);
        items.add(item);

        writer.write(items);

        verify(jdbcTemplate, times(1)).execute("SELECT 1 FROM test_table WHERE 1 = 0");
        verify(jdbcTemplate, times(1)).execute("TRUNCATE TABLE test_table");
    }

    @Test
    void testFlatFileItemReader() throws Exception {
        Map<String, Object> jobParameters = new HashMap<>();
        jobParameters.put("jsonFile", "{\"filePath\":\"/path/to/file.csv\", \"dbColumns\":[], \"delimiter\":\",\", \"SkipException\":[], \"datatype\":[], \"fileColumns\":[], \"requiredColumns\":[]}");

        FlatFileItemReader<Map<String, Object>> reader = batchConfig.reader(jobParameters);

        Assertions.assertNotNull(reader);
    }
}
