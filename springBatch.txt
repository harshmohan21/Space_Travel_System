import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import java.nio.file.Files;
import java.nio.file.Path;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

class JobParamTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private ConfigAccess configAccess;

    @InjectMocks
    private JobParam jobParam;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testSetJobParam_Success() throws Exception {
        // Arrange
        String tableName = "file_config_table";
        String configId = "123";
        Map<String, Object> config = new HashMap<>();
        config.put("FILEPATH", "/path/to/file");
        config.put("DELIMITER", ",");
        config.put("DEST_TABLE", "destination_table");
        config.put("lines_to_skip", 0);
        config.put("SKIP_EXCEPTION", "Y");
        config.put("APPEND_DATA", "N");
        config.put("FILE_COLUMNS", new java.sql.Array() { /* Mock data */ });
        config.put("REQUIRED_COLUMNS", new java.sql.Array() { /* Mock data */ });
        config.put("DB_COLUMNS", new java.sql.Array() { /* Mock data */ });
        config.put("DATATYPES", new java.sql.Array() { /* Mock data */ });

        // Mocking behavior
        when(configAccess.dao(tableName, configId)).thenReturn(config);
        when(jdbcTemplate.execute(anyString())).thenReturn(null);
        when(Files.lines(any(Path.class))).thenReturn(Files.lines(Path.of("/path/to/file"))); // Mock line count

        // Act
        JobParameters jobParameters = jobParam.setJobParam(tableName, configId);

        // Assert
        assertNotNull(jobParameters);
        verify(jdbcTemplate, times(1)).execute("SELECT 1 FROM " + tableName + " WHERE 1 = 0");
        verify(jdbcTemplate, times(1)).execute("SELECT 1 FROM destination_table WHERE 1 = 0");
    }

    @Test
    void testSetJobParam_TableDoesNotExist() {
        // Arrange
        String tableName = "non_existent_table";
        String configId = "123";

        // Mocking behavior
        doThrow(new SQLException()).when(jdbcTemplate).execute("SELECT 1 FROM " + tableName + " WHERE 1 = 0");

        // Act & Assert
        Exception exception = assertThrows(Exception.class, () -> jobParam.setJobParam(tableName, configId));
        assertEquals("File Configuration table doesn't exist", exception.getMessage());
    }

    @Test
    void testSetJobParam_InvalidSkipAppend() {
        // Arrange
        String tableName = "file_config_table";
        String configId = "123";
        Map<String, Object> config = new HashMap<>();
        config.put("FILEPATH", "/path/to/file");
        config.put("DELIMITER", ",");
        config.put("DEST_TABLE", "destination_table");
        config.put("lines_to_skip", 0);
        config.put("SKIP_EXCEPTION", "INVALID"); // Invalid value
        config.put("APPEND_DATA", "N");

        // Mocking behavior
        when(configAccess.dao(tableName, configId)).thenReturn(config);
        when(jdbcTemplate.execute(anyString())).thenReturn(null);

        // Act & Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> jobParam.setJobParam(tableName, configId));
        assertEquals("Invalid skip value: INVALID", exception.getMessage());
    }
    
    // Add more test cases for different scenarios as needed...
}
