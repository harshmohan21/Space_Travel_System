import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.boot.SpringApplication;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@RunWith(PowerMockRunner.class)
@PrepareForTest({Controller.class, ConfigAccess.class, JobParam.class, FileConfigTable.class, InsertUpdateDeleteRecord.class, SpringApplication.class})
public class ControllerTest {

    @Mock
    private JobLauncher jobLauncher;

    @Mock
    private Job job;

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private WebApplicationContext webApplicationContext;

    @InjectMocks
    private Controller controller;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        PowerMockito.mockStatic(SpringApplication.class);
    }

    @Test
    public void testHandleJobLaunch() throws Exception {
        // Mock behavior for JobLauncher and Job
        JobExecution jobExecution = mock(JobExecution.class);
        when(jobLauncher.run(eq(job), any(JobParameters.class))).thenReturn(jobExecution);

        // Mock behavior for ConfigAccess
        ConfigAccess configAccessMock = mock(ConfigAccess.class);
        PowerMockito.whenNew(ConfigAccess.class).withArguments(any(JdbcTemplate.class)).thenReturn(configAccessMock);

        // Mock behavior for JobParam
        JobParameters jobParametersMock = mock(JobParameters.class);
        JobParam jobParamMock = mock(JobParam.class);
        PowerMockito.whenNew(JobParam.class).withArguments(any(JdbcTemplate.class), any(ConfigAccess.class)).thenReturn(jobParamMock);
        when(jobParamMock.setJobParam(anyString(), anyString())).thenReturn(jobParametersMock);

        // Call the controller method
        controller.handle("tableName", "configId");

        // Verify that jobLauncher.run was called once
        verify(jobLauncher, times(1)).run(eq(job), any(JobParameters.class));
    }

    @Test
    public void testStopApplication() throws Exception {
        // Mock behavior for SpringApplication.exit
        when(SpringApplication.exit(any(WebApplicationContext.class), any())).thenReturn(0);

        // Call the controller method
        controller.stop();

        // Verify that SpringApplication.exit was called once
        verify(SpringApplication.class, times(1)).exit(eq(webApplicationContext), any());
    }

    @Test
    public void testCreateFileConfigTable() throws Exception {
        // Mock behavior for FileConfigTable
        FileConfigTable fileConfigTableMock = mock(FileConfigTable.class);
        PowerMockito.whenNew(FileConfigTable.class).withArguments(any(JdbcTemplate.class)).thenReturn(fileConfigTableMock);

        // Call the controller method
        controller.CreateFileConfigTable("tableName");

        // Verify that FileConfigTable.configTable(tableName) was called once
        verify(fileConfigTableMock, times(1)).configTable("tableName");
    }

    @Test
    public void testInsertUpdateDeleteConfig() throws Exception {
        // Mock behavior for InsertUpdateDeleteRecord
        InsertUpdateDeleteRecord recordMock = mock(InsertUpdateDeleteRecord.class);
        PowerMockito.whenNew(InsertUpdateDeleteRecord.class).withArguments(any(JdbcTemplate.class)).thenReturn(recordMock);

        // Call the controller method
        controller.insertConfig("INSERT INTO table VALUES (1, 'value')");

        // Verify that InsertUpdateDeleteRecord.execute(sql) was called once
        verify(recordMock, times(1)).execute("INSERT INTO table VALUES (1, 'value')");
    }
}
