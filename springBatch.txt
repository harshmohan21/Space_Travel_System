import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.batch.item.Chunk;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;

import javax.sql.DataSource;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class CustomItemWriterTest {

    @Mock
    private DataSource dataSource;

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;

    private CustomItemWriter customItemWriter;

    private String destTable = "test_table";
    private String appendData = "n";

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        customItemWriter = new CustomItemWriter(dataSource, jdbcTemplate, destTable, appendData);
    }

    @Test
    public void testEnsureTableExistsAndIsEmpty_TableExists() {
        doNothing().when(jdbcTemplate).execute(anyString());
        customItemWriter.ensureTableExistsAndIsEmpty(jdbcTemplate, destTable);
        verify(jdbcTemplate, times(1)).execute("SELECT 1 FROM " + destTable + " WHERE 1 = 1");
        verify(jdbcTemplate, times(1)).execute("TRUNCATE TABLE " + destTable);
    }

    @Test(expected = RuntimeException.class)
    public void testEnsureTableExistsAndIsEmpty_TableDoesNotExist() {
        doThrow(new RuntimeException()).when(jdbcTemplate).execute("SELECT 1 FROM " + destTable + " WHERE 1 = 1");
        customItemWriter.ensureTableExistsAndIsEmpty(jdbcTemplate, destTable);
    }

    @Test
    public void testWrite_NoItems() throws Exception {
