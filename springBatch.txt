import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.io.File;
import java.util.*;

import javax.sql.DataSource;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.batch.core.*;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.job.builder.StepBuilder;
import org.springframework.batch.core.listener.JobExecutionListenerSupport;
import org.springframework.batch.core.step.builder.SimpleStepBuilder;
import org.springframework.batch.core.step.builder.StepBuilderHelper;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.ItemWriter;
import org.springframework.batch.item.database.builder.JdbcBatchItemWriterBuilder;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;
import org.springframework.batch.support.transaction.ResourcelessTransactionManager;
import org.springframework.core.io.FileSystemResource;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

@ExtendWith(MockitoExtension.class)
public class BootBatchExampleApplicationTests {

    @Mock
    private JobRepository jobRepository;

    @Mock
    private DataSourceTransactionManager transactionManager;

    @Mock
    private JdbcTemplate jdbcTemplate;

    @Mock
    private DataSource dataSource;

    @Mock
    private JobCompletionNotificationImpl listener;

    @Mock
    private ItemReader<Map<String, Object>> reader;

    @Mock
    private ItemProcessor<Map<String, Object>, Map<String, Object>> processor;

    @Mock
    private ItemWriter<Map<String, Object>> writer;

    @InjectMocks
    private BatchConfig batchConfig;

    private String destTable = "test_table";

    @BeforeEach
    public void setUp() {
        // No setup needed as StepBuilderFactory and JobBuilderFactory are deprecated.
    }

    @Test
    public void testJobBean() {
        Job job = batchConfig.jobBean(jobRepository, listener, null);
        assertNotNull(job);
    }

    @Test
    public void testSteps() throws Exception {
        Step step = batchConfig.steps(jobRepository, transactionManager, reader, processor, writer, jdbcTemplate, "true", 1000, destTable);
        assertNotNull(step);
    }

    @Test
    public void testTaskExecutor() {
        ThreadPoolTaskExecutor executor = (ThreadPoolTaskExecutor) batchConfig.taskExecutor();
        assertNotNull(executor);
    }

    @Test
    public void testJobLauncher() {
        TaskExecutorJobLauncher launcher = batchConfig.jobLauncher(jobRepository);
        assertNotNull(launcher);
    }

    @Test
    public void testEnsureTableExistsAndIsEmpty() {
        doNothing().when(jdbcTemplate).execute(anyString());
        batchConfig.ensureTableExistsAndIsEmpty(jdbcTemplate, destTable);
        verify(jdbcTemplate, times(1)).execute("SELECT 1 FROM " + destTable + " WHERE 1 = 0");
        verify(jdbcTemplate, times(1)).execute("TRUNCATE TABLE " + destTable);
    }

    @Test
    public void testBuildDynamicSql() {
        Map<String, Object> sampleItem = new HashMap<>();
        sampleItem.put("col1", "val1");
        sampleItem.put("col2", "val2");

        String expectedSql = "INSERT INTO " + destTable + " (col1, col2) VALUES (:col1, :col2)";
        String sql = batchConfig.buildDynamicSql(sampleItem, destTable);

        assertEquals(expectedSql, sql);
    }

    @Test
    public void testMapToSqlParameterSource() {
        Map<String, Object> item = new HashMap<>();
        item.put("col1", "val1");
        item.put("col2", 123);

        SqlParameterSource parameterSource = batchConfig.mapToSqlParameterSource(item);

        assertEquals("val1", parameterSource.getValue("col1"));
        assertEquals(123, parameterSource.getValue("col2"));
    }

    @Test
    public void testItemWriter() throws Exception {
        doNothing().when(jdbcTemplate).execute(anyString());
        Map<String, Object> jobParameters = new HashMap<>();
        jobParameters.put("dest_table", destTable);
        jobParameters.put("appendData", "false");

        ItemWriter<Map<String, Object>> writer = batchConfig.itemWriter(dataSource, jdbcTemplate, destTable, "false");

        List<Map<String, Object>> items = new ArrayList<>();
        Map<String, Object> item = new HashMap<>();
        item.put("col1", "val1");
        item.put("col2", 123);
        items.add(item);

        writer.write(items);

        verify(jdbcTemplate, times(1)).execute("SELECT 1 FROM " + destTable + " WHERE 1 = 0");
        verify(jdbcTemplate, times(1)).execute("TRUNCATE TABLE " + destTable);
    }

    @Test
    public void testFlatFileItemReader() throws Exception {
        Map<String, Object> jobParameters = new HashMap<>();
        jobParameters.put("jsonFile", "{\"filePath\":\"/path/to/file.csv\", \"dbColumns\":[], \"delimiter\":\",\", \"SkipException\":[], \"datatype\":[], \"fileColumns\":[], \"requiredColumns\":[]}");

        FlatFileItemReader<Map<String, Object>> reader = batchConfig.reader(jobParameters);

        assertNotNull(reader);
    }

    @Test
    public void testItemProcessor() {
        ItemProcessor<Map<String, Object>, Map<String, Object>> processor = batchConfig.itemProcessor();
        assertNotNull(processor);
    }
}
