import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobExecutionListener;

public class JobCompletionNotificationImpl implements JobExecutionListener {
    private final Logger logger;

    public JobCompletionNotificationImpl(Logger logger) {
        this.logger = logger;
    }

    public JobCompletionNotificationImpl() {
        this(LoggerFactory.getLogger(JobCompletionNotificationImpl.class));
    }

    @Override
    public void beforeJob(JobExecution jobExecution) {
        System.out.println("listener");
        logger.info("Job Started");
    }

    @Override
    public void afterJob(JobExecution jobExecution) {
        if (jobExecution.getStatus() == BatchStatus.COMPLETED) {
            logger.info("Job Completed");
        }
    }
}



import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.springframework.batch.core.BatchStatus;
import org.springframework.batch.core.JobExecution;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class JobCompletionNotificationImplTest {

    @Mock
    private Logger logger;

    @Mock
    private JobExecution jobExecution;

    @InjectMocks
    private JobCompletionNotificationImpl jobCompletionNotification;

    @BeforeEach
    void setUp() {
        jobCompletionNotification = new JobCompletionNotificationImpl(logger);
    }

    @Test
    void testBeforeJob() {
        // Act
        jobCompletionNotification.beforeJob(jobExecution);

        // Assert
        verify(logger, times(1)).info("Job Started");
    }

    @Test
    void testAfterJob_WhenCompleted() {
        // Arrange
        when(jobExecution.getStatus()).thenReturn(BatchStatus.COMPLETED);

        // Act
        jobCompletionNotification.afterJob(jobExecution);

        // Assert
        verify(logger, times(1)).info("Job Completed");
    }

    @Test
    void testAfterJob_WhenNotCompleted() {
        // Arrange
        when(jobExecution.getStatus()).thenReturn(BatchStatus.FAILED);

        // Act
        jobCompletionNotification.afterJob(jobExecution);

        // Assert
        verify(logger, never()).info("Job Completed");
    }
    @Test
    void testDefaultConstructor() {
        // Act
        JobCompletionNotificationImpl defaultInstance = new JobCompletionNotificationImpl();

        // Assert
        // We can't directly verify the logger inside, but we can ensure no exceptions
        // and that the beforeJob and afterJob methods work as intended
        defaultInstance.beforeJob(jobExecution);
        defaultInstance.afterJob(jobExecution);
    }
}
