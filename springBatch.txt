import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import java.sql.PreparedStatement;

public class InsertUpdateDeleteRecord {
    private final JdbcTemplate jdbcTemplate;

    public InsertUpdateDeleteRecord(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public void execute(String sql) {
        String trimmedSql = sql.trim().toUpperCase();
        if (trimmedSql.startsWith("INSERT")) {
            KeyHolder keyHolder = new GeneratedKeyHolder();
            jdbcTemplate.update(connection -> {
                PreparedStatement ps = connection.prepareStatement(sql, new String[]{"CONFIG_ID"});
                return ps;
            }, keyHolder);
            Number generatedId = keyHolder.getKey();
            System.out.println("Executed SQL insert query successfully:");
            System.out.println("Generated config_id for the inserted record is: " + generatedId);
        } else if (trimmedSql.startsWith("UPDATE")) {
            System.out.println("Update started");
            int rowsAffected = jdbcTemplate.update(sql);
            System.out.println("Number of rows affected: " + rowsAffected);
            System.out.println("Executed SQL UPDATE query successfully:");
        } else if (trimmedSql.startsWith("DELETE")) {
            System.out.println("DELETE started");
            int rowsAffected = jdbcTemplate.update(sql);
            System.out.println("Number of rows affected: " + rowsAffected);
            System.out.println("Executed SQL DELETE query successfully:");
        } else {
            throw new IllegalArgumentException("Only INSERT, UPDATE, and DELETE are supported. Provided sql: " + sql);
        }
    }
}



import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import java.sql.PreparedStatement;
import java.sql.ResultSet;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class InsertUpdateDeleteRecordTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @InjectMocks
    private InsertUpdateDeleteRecord insertUpdateDeleteRecord;

    @BeforeEach
    void setUp() {
        insertUpdateDeleteRecord = new InsertUpdateDeleteRecord(jdbcTemplate);
    }


@Test
    void testExecute_InsertQuery() throws Exception {
        // Arrange
        String sql = "INSERT INTO test_table (name) VALUES ('test')";
        KeyHolder keyHolder = new GeneratedKeyHolder();

        doAnswer(invocation -> {
            PreparedStatement ps = mock(PreparedStatement.class);
            Connection connection = mock(Connection.class);
            ResultSet rs = mock(ResultSet.class);

            when(connection.prepareStatement(anyString(), any(String[].class))).thenReturn(ps);
            when(ps.getGeneratedKeys()).thenReturn(rs);
            when(rs.next()).thenReturn(true);
            when(rs.getObject(1)).thenReturn(1L);

            PreparedStatementCreator psc = invocation.getArgument(0);
            psc.createPreparedStatement(connection);
            keyHolder.getKeyList().add(Map.of("CONFIG_ID", 1));
            return null;
        }).when(jdbcTemplate).update(any(), any(KeyHolder.class));

        // Act
        insertUpdateDeleteRecord.execute(sql);

        // Assert
        verify(jdbcTemplate, times(1)).update(any(), any(KeyHolder.class));
    }

    @Test
    void testExecute_UpdateQuery() {
        // Arrange
        String sql = "UPDATE test_table SET name = 'new_name' WHERE id = 1";
        when(jdbcTemplate.update(sql)).thenReturn(1);

        // Act
        insertUpdateDeleteRecord.execute(sql);

        // Assert
        verify(jdbcTemplate, times(1)).update(sql);
    }

    @Test
    void testExecute_DeleteQuery() {
        // Arrange
        String sql = "DELETE FROM test_table WHERE id = 1";
        when(jdbcTemplate.update(sql)).thenReturn(1);

        // Act
        insertUpdateDeleteRecord.execute(sql);

        // Assert
        verify(jdbcTemplate, times(1)).update(sql);
    }

    @Test
    void testExecute_UnsupportedQuery() {
        // Arrange
        String sql = "SELECT * FROM test_table";

        // Act & Assert
        assertThrows(IllegalArgumentException.class, () -> insertUpdateDeleteRecord.execute(sql));
    }
}

