To print only the record that caused the failure rather than the entire chunk, you can modify your `ItemWriter` to throw a custom exception that includes the problematic record. Then, you can catch this exception in your `CustomItemWriteListener` and print the specific record.

Here's how you can achieve this:

1. **Create a Custom Exception**: Define a custom exception that carries the record causing the failure.

2. **Modify the ItemWriter**: Modify the `ItemWriter` to throw the custom exception when an error occurs.

3. **Update the CustomItemWriteListener**: Update the listener to handle the custom exception and print the specific record causing the issue.

### Step-by-Step Implementation

#### 1. Create a Custom Exception

```java
public class ItemWriteException extends Exception {
    private final Map<String, Object> problematicRecord;

    public ItemWriteException(String message, Map<String, Object> problematicRecord) {
        super(message);
        this.problematicRecord = problematicRecord;
    }

    public Map<String, Object> getProblematicRecord() {
        return problematicRecord;
    }
}
```

#### 2. Modify the ItemWriter

Modify your `ItemWriter` to throw `ItemWriteException` for problematic records.

```java
import org.springframework.batch.item.ItemWriter;

import java.util.List;
import java.util.Map;

public class CustomItemWriter implements ItemWriter<Map<String, Object>> {

    @Override
    public void write(List<? extends Map<String, Object>> items) throws Exception {
        for (Map<String, Object> item : items) {
            try {
                // Your write logic here
                // If an error occurs, throw the custom exception
                if (/* some condition that causes an error */) {
                    throw new ItemWriteException("Error writing item", item);
                }
            } catch (ItemWriteException e) {
                throw e;  // Re-throw the custom exception
            } catch (Exception e) {
                throw new ItemWriteException("Unexpected error writing item", item);
            }
        }
    }
}
```

#### 3. Update the CustomItemWriteListener

Update the listener to handle the custom exception and print the specific record causing the issue.

```java
import org.springframework.batch.core.ItemWriteListener;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;

@Component
public class CustomItemWriteListener implements ItemWriteListener<Map<String, Object>> {

    @Override
    public void beforeWrite(List<? extends Map<String, Object>> items) {
        // Optional: Add logic before writing if needed
    }

    @Override
    public void afterWrite(List<? extends Map<String, Object>> items) {
        // Optional: Add logic after writing if needed
    }

    @Override
    public void onWriteError(Exception ex, List<? extends Map<String, Object>> items) {
        if (ex instanceof ItemWriteException) {
            ItemWriteException iwe = (ItemWriteException) ex;
            System.err.println("Exception encountered while writing: " + ex.getMessage());
            System.err.println("Record causing the issue: " + iwe.getProblematicRecord());
        } else {
            System.err.println("Exception encountered while writing: " + ex.getMessage());
            System.err.println("Records causing the issue: " + items);
        }
    }
}
```

### Summary

1. **Custom Exception**: Create a custom exception (`ItemWriteException`) that holds the problematic record.
2. **Custom ItemWriter**: Modify your `ItemWriter` to throw the custom exception when an error occurs.
3. **Custom Listener**: Update your `CustomItemWriteListener` to handle the custom exception and print the specific problematic record.

By implementing these changes, your application will only print the specific record causing the failure during the write operation.
