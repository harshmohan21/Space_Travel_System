import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Array;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class JobParameterService {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    public JobParameters createJobParam(String configId) throws Exception {
        // Fetch data from the database
        Map<String, Object> config = fetchJobConfig(configId);

        // Extract data from the result
        String filePath = (String) config.get("filePath");
        Path path = Paths.get(filePath);
        long lineCount = Files.lines(path).count();

        // Create JobParameters
        return new JobParametersBuilder()
                .addString("filePath", filePath)
                .addString("delimiter", (String) config.get("delimiter"))
                .addString("fileColumns", arrayToString((Object[]) config.get("fileColumns")))
                .addString("requiredColumns", arrayToString((Object[]) config.get("requiredColumns")))
                .addString("dbColumns", arrayToString((Object[]) config.get("dbColumns")))
                .addString("dataTypes", arrayToString((Object[]) config.get("dataTypes")))
                .addString("destTable", (String) config.get("destTable"))
                .addString("skipException", (String) config.get("skipException"))
                .addString("appendData", (String) config.get("appendData"))
                .addLong("lineCount", lineCount)
                .addLong("startAt", System.currentTimeMillis())
                .toJobParameters();
    }

    private Map<String, Object> fetchJobConfig(String configId) {
        String sql = "SELECT * FROM JOB_CONFIGURATIONS WHERE CONFIG_ID = ?";
        return jdbcTemplate.queryForObject(sql, new Object[]{configId}, (ResultSet rs, int rowNum) -> {
            Map<String, Object> result = new HashMap<>();
            result.put("configId", rs.getString("CONFIG_ID"));
            result.put("filePath", rs.getString("FILEPATH"));
            result.put("delimiter", rs.getString("DELIMITER"));
            result.put("fileColumns", rs.getArray("FILE_COLUMNS").getArray());
            result.put("requiredColumns", rs.getArray("REQUIRED_COLUMNS").getArray());
            result.put("dbColumns", rs.getArray("DB_COLUMNS").getArray());
            result.put("dataTypes", rs.getArray("DATATYPES").getArray());
            result.put("destTable", rs.getString("DEST_TABLE"));
            result.put("skipException", rs.getString("SKIP_EXCEPTION"));
            result.put("appendData", rs.getString("APPEND_DATA"));
            return result;
        });
    }

    private String arrayToString(Object[] array) {
        StringBuilder sb = new StringBuilder();
        for (Object obj : array) {
            sb.append(obj.toString()).append(",");
        }
        return sb.length() > 0 ? sb.substring(0, sb.length() - 1) : "";
    }
}
