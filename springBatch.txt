import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.jdbc.core.JdbcTemplate;

import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class FileConfigTableTest {

    @Mock
    private JdbcTemplate jdbcTemplate;

    @InjectMocks
    private FileConfigTable fileConfigTable;

    @BeforeEach
    void setUp() {
        fileConfigTable = new FileConfigTable(jdbcTemplate);
    }

@Test
    void testConfigTable_TableExists() {
        // Arrange
        String tableName = "test_table";
        doNothing().when(jdbcTemplate).execute("SELECT 1 FROM " + tableName + " WHERE 1 = 0");

        // Act
        fileConfigTable.configTable(tableName);

        // Assert
        verify(jdbcTemplate, times(1)).execute("SELECT 1 FROM " + tableName + " WHERE 1 = 0");
        verify(jdbcTemplate, times(1)).execute("SELECT 1 FROM " + tableName + " WHERE 1 = 0");
        verify(jdbcTemplate, never()).execute(startsWith("CREATE TABLE"));
    }

    @Test
    void testConfigTable_TableDoesNotExist() {
        // Arrange
        String tableName = "test_table";
        doThrow(new RuntimeException()).when(jdbcTemplate).execute("SELECT 1 FROM " + tableName + " WHERE 1 = 0");
        doNothing().when(jdbcTemplate).execute(anyString());

        // Act
        fileConfigTable.configTable(tableName);

        // Assert
        verify(jdbcTemplate, times(1)).execute("SELECT 1 FROM " + tableName + " WHERE 1 = 0");
        verify(jdbcTemplate, times(1)).execute(startsWith("CREATE TABLE " + tableName));
    }

    @Test
    void testCreateTable() {
        // Arrange
        String tableName = "test_table";
        String createTableSql = "CREATE TABLE " + tableName + " (\n" +
                "config_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, \n" +
                "filepath VARCHAR2(255), \n" +
                "delimiter VARCHAR2(255), \n" +
                "lines_to_skip INTEGER, \n" +
                "file_columns string_array, \n" +
                "required_columns string_array, \n" +
                "db_columns string_array, \n" +
                "datatypes string_array, \n" +
                "dest_table VARCHAR2(255), \n" +
                "skip_exception CHAR(1), \n" +
                "append_data CHAR(1) \n" +
                ") \n" +
                "NESTED TABLE file_columns STORE AS " + tableName + "_file_columns, \n" +
                "NESTED TABLE required_columns STORE AS " + tableName + "_required_columns, \n" +
                "NESTED TABLE db_columns STORE AS " + tableName + "_db_columns, \n" +
                "NESTED TABLE datatypes STORE AS " + tableName + "_datatypes";
        
        doNothing().when(jdbcTemplate).execute(anyString());

        // Act
        fileConfigTable.createTable(tableName);

        // Assert
        verify(jdbcTemplate, times(1)).execute(createTableSql);
    }
}
